generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model login {
  id         Int       @id @default(autoincrement())
  user_id    Int
  token      String    @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  expires_at DateTime? @db.Timestamp(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id       Int        @id @default(autoincrement())
  username String     @unique @db.VarChar(255)
  password String     @db.VarChar(255)
  blogs    blogs[]
  login    login[]
  projects projects[]
}

model blogs {
  id          Int       @id @default(autoincrement())
  user_id     Int
  image       String?
  date        DateTime  @db.Date
  title       String
  description String
  content     String?
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  users       users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model project_icons {
  id         Int       @id @default(autoincrement())
  project_id Int?
  icon_name  String?   @db.VarChar(50)
  projects   projects? @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model project_linkedin_partners {
  id         Int       @id @default(autoincrement())
  project_id Int?
  url        String?
  projects   projects? @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model project_linkedin_teams {
  id         Int       @id @default(autoincrement())
  project_id Int?
  url        String?
  projects   projects? @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model project_partners {
  id         Int       @id @default(autoincrement())
  project_id Int?
  name       String?   @db.VarChar(100)
  projects   projects? @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model project_teams {
  id         Int       @id @default(autoincrement())
  project_id Int?
  name       String?   @db.VarChar(100)
  projects   projects? @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model projects {
  id                        Int                         @id @default(autoincrement())
  user_id                   Int
  slug                      String                      @unique @db.VarChar(100)
  demo                      String?
  head                      String?
  status                    String                      @db.VarChar(50)
  title                     String                      @db.VarChar(100)
  years                     String                      @db.VarChar(10)
  role                      String?
  description               String
  image                     String
  project_icons             project_icons[]
  project_linkedin_partners project_linkedin_partners[]
  project_linkedin_teams    project_linkedin_teams[]
  project_partners          project_partners[]
  project_teams             project_teams[]
  users                     users                       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
